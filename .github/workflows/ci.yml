name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

jobs:
  test:
    name: Build and test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgis/postgis:17-3.4
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: shortnr_test
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      MIX_ENV: test
      PGHOST: 127.0.0.1
      PGUSER: postgres
      PGPASSWORD: postgres

    steps:
      - uses: actions/checkout@v4

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: '1.17.1'
          otp-version: '27.0'

      - name: Cache deps
        uses: actions/cache@v4
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix-

      - name: Cache build
        uses: actions/cache@v4
        with:
          path: _build
          key: ${{ runner.os }}-build-${{ hashFiles('**/mix.lock') }}-${{ env.MIX_ENV }}
          restore-keys: ${{ runner.os }}-build-

      - name: Install dependencies
        run: mix deps.get

      - name: Wait for Postgres
        run: |
          for i in {1..30}; do
            pg_isready -h 127.0.0.1 -U postgres && break
            sleep 1
          done

      - name: Setup DB
        run: |
          mix ecto.create
          mix ecto.migrate

      - name: Run tests
        run: mix test

  deploy:
    name: Deploy to Fly.io
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    concurrency:
      group: fly-deploy-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4

      - name: Install Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@v1

      - name: Deploy
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: flyctl deploy --remote-only
